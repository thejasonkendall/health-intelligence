name: Build and Deploy Health Intelligence App

on:
  push:
    branches: [ main ]
    paths:
      - 'api/**'
      - 'dashboard/**'
      - 'nginx/**'
      - 'database/**'
      - 'Dockerfile.api'
      - 'Dockerfile.dashboard'
      - 'requirements.txt'
  workflow_dispatch: # Allows manual triggering

env:
  APPLICATION_NAME: "health-intelligence-app"
  DEPLOYMENT_GROUP_NAME: "health-intelligence-deployment-group"

jobs:
  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    environment: production
    
    outputs:
      commit-sha: ${{ steps.vars.outputs.commit-sha }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up variables
        id: vars
        run: |
          echo "commit-sha=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.api
          push: true
          tags: |
            ${{ vars.ECR_API_REPO }}:${{ steps.vars.outputs.commit-sha }}
            ${{ vars.ECR_API_REPO }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push Dashboard image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.dashboard
          push: true
          tags: |
            ${{ vars.ECR_DASHBOARD_REPO }}:${{ steps.vars.outputs.commit-sha }}
            ${{ vars.ECR_DASHBOARD_REPO }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Image build summary
        run: |
          echo "✅ Successfully built and pushed images:"
          echo "📦 API: ${{ vars.ECR_API_REPO }}:${{ steps.vars.outputs.commit-sha }}"
          echo "📦 Dashboard: ${{ vars.ECR_DASHBOARD_REPO }}:${{ steps.vars.outputs.commit-sha }}"

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: build
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}
      
      - name: Create deployment package
        run: |
          echo "🚀 Creating deployment package..."
          
          # Debug: Check current directory and files
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          echo "Looking for appspec.yml:"
          find . -name "appspec.yml" -o -name "AppSpec.yml" -o -name "appspec.yaml"
          
          # Create deployment directory
          mkdir -p deployment-package
          
          # Copy deployment files
          if [ -f docker-compose.prod.yml ]; then
            cp docker-compose.prod.yml deployment-package/docker-compose.yml
          else
            echo "❌ ERROR: docker-compose.prod.yml not found"
            exit 1
          fi
          
          if [ -f appspec.yml ]; then
            cp appspec.yml deployment-package/
          else
            echo "❌ ERROR: appspec.yml not found"
            exit 1
          fi
          
          # Copy scripts directory
          if [ -d scripts ]; then
            cp scripts/deploy.sh deployment-package/
            cp scripts/start_server.sh deployment-package/
            cp scripts/stop_server.sh deployment-package/
          else
            echo "❌ ERROR: scripts directory not found"
            exit 1
          fi
          
          # Replace image tags in docker-compose with current commit SHA
          sed -i "s|\${API_IMAGE_TAG}|${{ needs.build.outputs.commit-sha }}|g" deployment-package/docker-compose.yml
          sed -i "s|\${DASHBOARD_IMAGE_TAG}|${{ needs.build.outputs.commit-sha }}|g" deployment-package/docker-compose.yml
          sed -i "s|\${ECR_API_REPO}|${{ vars.ECR_API_REPO }}|g" deployment-package/docker-compose.yml
          sed -i "s|\${ECR_DASHBOARD_REPO}|${{ vars.ECR_DASHBOARD_REPO }}|g" deployment-package/docker-compose.yml
          
          # Create deployment package
          cd deployment-package
          zip -r ../deployment-package.zip .
          cd ..
          
          echo "✅ Deployment package created successfully"
      
      - name: Upload to S3 and deploy
        run: |
          COMMIT_SHA=${{ needs.build.outputs.commit-sha }}
          
          # Upload to S3
          echo "📤 Uploading deployment package to S3..."
          aws s3 cp deployment-package.zip s3://${{ vars.CODEDEPLOY_S3_BUCKET }}/health-intelligence/${COMMIT_SHA}/deployment-package.zip
          
          # Create CodeDeploy deployment
          echo "🚀 Starting CodeDeploy deployment..."
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name ${{ env.APPLICATION_NAME }} \
            --deployment-group-name ${{ env.DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=${{ vars.CODEDEPLOY_S3_BUCKET }},key=health-intelligence/${COMMIT_SHA}/deployment-package.zip,bundleType=zip \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --description "Deploy commit ${COMMIT_SHA}" \
            --query 'deploymentId' \
            --output text)
          
          echo "📋 Started deployment: $DEPLOYMENT_ID"
          echo "deployment-id=${DEPLOYMENT_ID}" >> $GITHUB_ENV
          
          # Wait for deployment to complete
          echo "⏳ Waiting for deployment to complete..."
          aws deploy wait deployment-successful --deployment-id $DEPLOYMENT_ID
          
          echo "🎉 Deployment completed successfully!"
      
      - name: Deployment summary
        if: success()
        run: |
          echo "## 🎉 Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit SHA**: ${{ needs.build.outputs.commit-sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment ID**: ${{ env.deployment-id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Application**: ${{ env.APPLICATION_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Group**: ${{ env.DEPLOYMENT_GROUP_NAME }}" >> $GITHUB_STEP_SUMMARY
      
      - name: Deployment failure summary
        if: failure()
        run: |
          echo "## ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "Please check the logs above for details." >> $GITHUB_STEP_SUMMARY
          echo "- **Commit SHA**: ${{ needs.build.outputs.commit-sha }}" >> $GITHUB_STEP_SUMMARY
          if [ ! -z "${{ env.deployment-id }}" ]; then
            echo "- **Deployment ID**: ${{ env.deployment-id }}" >> $GITHUB_STEP_SUMMARY
          fi